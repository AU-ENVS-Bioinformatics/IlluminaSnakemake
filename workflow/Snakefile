# Reading configuration file
configfile: "config/config.yaml"
DEFAULT_SOURCE_FILEPATH = config.get("DEFAULT_SOURCE_FILEPATH", "reads/")
DEFAULT_DEST_FILEPATH = config.get("DEFAULT_DEST_FILEPATH", "results/")
RENAMED_READS_FILEPATH = config.get("RENAMED_READS_FILEPATH", "renamed_raw_reads/")
TRIMMED_READS_FILEPATH = config.get("TRIMMED_READS_FILEPATH", "trimmed/")
FASTQC_FILEPATH = config.get("FASTQC_FILEPATH", "allfastqc/")
SPADES_FILEPATH = config.get("SPADES_FILEPATH", "spades/")
QUAST_FILEPATH = config.get("QUAST_FILEPATH", "quast/")
PROKKA_FILEPATH = config.get("PROKKA_FILEPATH", "prokka/")


# Searching for Illumina files
(name, sample, number, lane, read, segment,) = glob_wildcards(DEFAULT_SOURCE_FILEPATH+ "{name}-{sample}_{number}_{lane}_{read}_{segment}.fastq.gz")

rule all:
    input:
        expand(DEFAULT_DEST_FILEPATH + FASTQC_FILEPATH + "{sample}_R1.html", sample = sample),
        expand(DEFAULT_DEST_FILEPATH + FASTQC_FILEPATH + "{sample}_R2.html", sample = sample),
        expand(DEFAULT_DEST_FILEPATH + SPADES_FILEPATH + "{sample}_spades/{sample}_contigs.fasta", sample = sample),
        expand(DEFAULT_DEST_FILEPATH + QUAST_FILEPATH + "{sample}/report.tsv", sample = sample),
        expand(DEFAULT_DEST_FILEPATH + PROKKA_FILEPATH + "{sample}_prokka", sample = sample)

rule renaming_files:
    input:
        expand(
            DEFAULT_SOURCE_FILEPATH + "{name}-{sample}_{number}_{lane}_{read}_{segment}.fastq.gz",
            zip,
            name = name,sample = sample,
            number = number,lane = lane,
            read = read, segment = segment
            )
    output:
        expand(
            DEFAULT_DEST_FILEPATH + RENAMED_READS_FILEPATH + "{sample}_{read}.fastq.gz",
            zip,sample = sample,read  = read
            ),
    script:
        "scripts/renaming_files.py"

rule trim_galore_pe:
    input:
        [DEFAULT_DEST_FILEPATH + RENAMED_READS_FILEPATH + "{sample}_R1.fastq.gz", DEFAULT_DEST_FILEPATH + RENAMED_READS_FILEPATH + "{sample}_R2.fastq.gz"],
    output:
        DEFAULT_DEST_FILEPATH + TRIMMED_READS_FILEPATH + "{sample}_R1_val_1.fq.gz",
        DEFAULT_DEST_FILEPATH + TRIMMED_READS_FILEPATH + "{sample}_R1.fastq.gz_trimming_report.txt",
        DEFAULT_DEST_FILEPATH + TRIMMED_READS_FILEPATH + "{sample}_R2_val_2.fq.gz",
        DEFAULT_DEST_FILEPATH + TRIMMED_READS_FILEPATH + "{sample}_R2.fastq.gz_trimming_report.txt",
    params:
        extra=" ".join(config.get("trim_galore", "")),
    log:
        "logs/trim_galore/{sample}.log",
    wrapper:
        "v1.12.1/bio/trim_galore/pe"

rule generate_fastq_qc_statistics:
    input:
        DEFAULT_DEST_FILEPATH + TRIMMED_READS_FILEPATH + "{sample}_R{read_n}_val_{read_n}.fq.gz"
    output:
        html=DEFAULT_DEST_FILEPATH + FASTQC_FILEPATH + "{sample}_R{read_n}.html",
        zip=DEFAULT_DEST_FILEPATH + FASTQC_FILEPATH + "{sample}_R{read_n}_fastqc.zip" # the suffix _fastqc.zip is necessary for multiqc to find the file. If not using multiqc, you are free to choose an arbitrary filename
    params:
        extra=" ".join(config.get("fastqc", "")),
    log:
        "logs/fastqc/{sample}_R{read_n}.log"
    threads: 1
    wrapper:
        "v1.12.1/bio/fastqc"

rule spades:
    input:
        R1 =  DEFAULT_DEST_FILEPATH + TRIMMED_READS_FILEPATH + "{sample}_R1_val_1.fq.gz",
        R2 =  DEFAULT_DEST_FILEPATH + TRIMMED_READS_FILEPATH + "{sample}_R2_val_2.fq.gz",
    output:
        outdir = directory(DEFAULT_DEST_FILEPATH + SPADES_FILEPATH+"{sample}_spades"),
        contigs = DEFAULT_DEST_FILEPATH + SPADES_FILEPATH + "{sample}_spades/{sample}_contigs.fasta"
    params:
        extra=" ".join(config.get("spades", "")),
    log:
        "logs/spades/{sample}.log",
    shell:
        "spades.py {params.extra}"
        " -o {output.outdir}"
        " -1 {input.R1} -2 {input.R2}" + 
        " >> {log} 2>&1"
        "&& mv {output.outdir}/contigs.fasta {output.contigs}"

rule generate_quality_assessment_genome_assemblies:
    input:
        fasta= DEFAULT_DEST_FILEPATH + SPADES_FILEPATH + "{sample}_spades/{sample}_contigs.fasta",
        R1=DEFAULT_DEST_FILEPATH + TRIMMED_READS_FILEPATH + "{sample}_R1_val_1.fq.gz",
        R2= DEFAULT_DEST_FILEPATH + TRIMMED_READS_FILEPATH + "{sample}_R2_val_2.fq.gz",
    output:
        outdir = directory(DEFAULT_DEST_FILEPATH + QUAST_FILEPATH +"{sample}"),
        report = DEFAULT_DEST_FILEPATH + QUAST_FILEPATH +"{sample}/report.tsv",
    log:
        "logs/quast/{sample}.log",
    params:
        extra=" ".join(config.get("quast", "")),
    shell:
        "quast {params.extra} "
        "--pe1 {input.R1} --pe2 {input.R2} "
        "-o {output.outdir} "
        "{input.fasta} "
        ">> {log} 2>&1 "

rule annotate_bacterial_genome:
    input:
        DEFAULT_DEST_FILEPATH + SPADES_FILEPATH+"{sample}_spades/{sample}_contigs.fasta",
    output:
        directory(DEFAULT_DEST_FILEPATH + PROKKA_FILEPATH + "{sample}_prokka"),
    log:
        "logs/prokka/{sample}.log",
    params:
        extra=" ".join(config.get("prokka", "")),
    shell:
        "prokka --outdir {output} {params.extra} "
        "{input} >> {log} 2>&1"