# Reading configuration file
configfile: "config/config.yaml"


DEFAULT_SOURCE_FILEPATH = config.get("DEFAULT_SOURCE_FILEPATH", "reads/")
DEFAULT_DEST_FILEPATH = config.get("DEFAULT_DEST_FILEPATH", "results/")
RENAMED_READS_FILEPATH = config.get("RENAMED_READS_FILEPATH", "renamed_raw_reads/")
TRIMMED_READS_FILEPATH = config.get("TRIMMED_READS_FILEPATH", "trimmed/")
FASTQC_FILEPATH = config.get("FASTQC_FILEPATH", "allfastqc/")
SPADES_FILEPATH = config.get("SPADES_FILEPATH", "spades/")
QUAST_FILEPATH = config.get("QUAST_FILEPATH", "quast/")
PROKKA_FILEPATH = config.get("PROKKA_FILEPATH", "prokka/")
BUSCO_FILEPATH = config.get("BUSCO_FILEPATH", "busco/")

AVAILABLE_THREADS = int(workflow.cores * 0.75)

# Searching for Illumina files
regex_raw_illumina_files = f"{DEFAULT_SOURCE_FILEPATH}{{name}}-{{sample}}_{{number}}_{{lane}}_{{read}}_{{segment}}.fastq.gz"
(
    name,
    sample,
    number,
    lane,
    read,
    segment,
) = glob_wildcards(regex_raw_illumina_files)


rule all:
    input:
        expand(
            f"{DEFAULT_DEST_FILEPATH}{FASTQC_FILEPATH}{{sample}}_R1.html",
            sample=sample,
        ),
        expand(
            f"{DEFAULT_DEST_FILEPATH}{FASTQC_FILEPATH}{{sample}}_R2.html",
            sample=sample,
        ),
        expand(
            f"{DEFAULT_DEST_FILEPATH}{SPADES_FILEPATH}{{sample}}_spades/{{sample}}_contigs.fasta",
            sample=sample,
        ),
        expand(
            f"{DEFAULT_DEST_FILEPATH}{QUAST_FILEPATH}{{sample}}/report.tsv",
            sample=sample,
        ),
        expand(
            f"{DEFAULT_DEST_FILEPATH}{PROKKA_FILEPATH}{{sample}}_prokka", sample=sample
        ),
        expand(
            f"{DEFAULT_DEST_FILEPATH}{BUSCO_FILEPATH}{{sample}}/txome_busco/prok", sample = sample
        )


rule renaming_files:
    input:
        set(
            expand(
                "{dir}{name}-{{sample}}_{number}_{lane}_{{read}}_{segment}.fastq.gz",
                zip,
                name=name,
                number=number,
                lane=lane,
                segment=segment,
                dir=DEFAULT_SOURCE_FILEPATH,
            )
        ),
    log:
        "logs/renaming/{sample}_{read}.log",
    conda:
        "envs/renaming_files.yaml"
    output:
        f"{DEFAULT_DEST_FILEPATH}{RENAMED_READS_FILEPATH}{{sample}}_{{read}}.fastq.gz",
    shell:
        "cp {input} {output}"

trim_galore_params = config.get("trim_galore", "")
trim_galore_params.append(f'--cores {AVAILABLE_THREADS}')
rule trim_paired_end_reads:
    input:
        [
            f"{DEFAULT_DEST_FILEPATH}{RENAMED_READS_FILEPATH}{{sample}}_R1.fastq.gz",
            f"{DEFAULT_DEST_FILEPATH}{RENAMED_READS_FILEPATH}{{sample}}_R2.fastq.gz",
        ],
    output:
        f"{DEFAULT_DEST_FILEPATH}{TRIMMED_READS_FILEPATH}{{sample}}_R1_val_1.fq.gz",
        f"{DEFAULT_DEST_FILEPATH}{TRIMMED_READS_FILEPATH}{{sample}}_R1.fastq.gz_trimming_report.txt",
        f"{DEFAULT_DEST_FILEPATH}{TRIMMED_READS_FILEPATH}{{sample}}_R2_val_2.fq.gz",
        f"{DEFAULT_DEST_FILEPATH}{TRIMMED_READS_FILEPATH}{{sample}}_R2.fastq.gz_trimming_report.txt",
    params:
        extra=" ".join(trim_galore_params),        
    log:
        "logs/trim_galore/{sample}.log",
    conda:
        "envs/trim_paired_end_reads.yaml"
    wrapper:
        "v1.12.1/bio/trim_galore/pe"


rule generate_fastq_qc_statistics:
    input:
        f"{DEFAULT_DEST_FILEPATH}{TRIMMED_READS_FILEPATH}{{sample}}_R{{read_n}}_val_{{read_n}}.fq.gz",
    output:
        html=f"{DEFAULT_DEST_FILEPATH}{FASTQC_FILEPATH}{{sample}}_R{{read_n}}.html",
        zip=f"{DEFAULT_DEST_FILEPATH}{FASTQC_FILEPATH}{{sample}}_R{{read_n}}_fastqc.zip",
    params:
        extra=" ".join(config.get("fastqc", "")),
    log:
        "logs/fastqc/{sample}_R{read_n}.log",
    conda:
        "envs/generate_fastq_qc_statistics.yaml"
    threads: AVAILABLE_THREADS
    wrapper:
        "v1.12.1/bio/fastqc"


rule assembling_genome:
    input:
        R1=f"{DEFAULT_DEST_FILEPATH}{TRIMMED_READS_FILEPATH}{{sample}}_R1_val_1.fq.gz",
        R2=f"{DEFAULT_DEST_FILEPATH}{TRIMMED_READS_FILEPATH}{{sample}}_R2_val_2.fq.gz",
    output:
        outdir=directory(f"{DEFAULT_DEST_FILEPATH}{SPADES_FILEPATH}{{sample}}_spades"),
        contigs=f"{DEFAULT_DEST_FILEPATH}{SPADES_FILEPATH}{{sample}}_spades/{{sample}}_contigs.fasta",
    params:
        extra=" ".join(config.get("spades", "")),
    log:
        "logs/spades/{sample}.log",
    conda:
        "envs/assembling_genome.yaml"
    threads: AVAILABLE_THREADS
    shell:
        "spades.py {params.extra} "
        "--threads {threads} "
        "-o {output.outdir} "
        "-1 {input.R1} -2 {input.R2} "
        ">> {log} 2>&1 "
        "&& mv {output.outdir}/contigs.fasta {output.contigs} "


rule generate_quality_assessment_genome_assemblies:
    input:
        fasta=f"{DEFAULT_DEST_FILEPATH}{SPADES_FILEPATH}{{sample}}_spades/{{sample}}_contigs.fasta",
        R1=f"{DEFAULT_DEST_FILEPATH}{TRIMMED_READS_FILEPATH}{{sample}}_R1_val_1.fq.gz",
        R2=f"{DEFAULT_DEST_FILEPATH}{TRIMMED_READS_FILEPATH}{{sample}}_R2_val_2.fq.gz",
    output:
        outdir=directory(f"{DEFAULT_DEST_FILEPATH}{QUAST_FILEPATH}{{sample}}"),
        report=f"{DEFAULT_DEST_FILEPATH}{QUAST_FILEPATH}{{sample}}/report.tsv",
    log:
        "logs/quast/{sample}.log",
    conda:
        "envs/generate_quality_assessment_genome_assemblies.yaml"
    params:
        extra=" ".join(config.get("quast", "")),
    threads: AVAILABLE_THREADS
    shell:
        "quast {params.extra} "
        "--threads {threads} "
        "--pe1 {input.R1} --pe2 {input.R2} "
        "-o {output.outdir} "
        "{input.fasta} "
        ">> {log} 2>&1 "


rule annotate_bacterial_genome:
    input:
        f"{DEFAULT_DEST_FILEPATH}{SPADES_FILEPATH}{{sample}}_spades/{{sample}}_contigs.fasta",
    output:
        directory(f"{DEFAULT_DEST_FILEPATH}{PROKKA_FILEPATH}{{sample}}_prokka"),
    log:
        "logs/prokka/{sample}.log",
    conda:
        "envs/annotate_bacterial_genome.yaml"
    params:
        extra=" ".join(config.get("prokka", "")),
    threads: AVAILABLE_THREADS
    shell:
        "prokka --outdir {output} {params.extra} "
        "--cpus {threads} "
        "--prefix {wildcards.sample} --locustag {wildcards.sample} "
        "{input} >> {log} 2>&1"
        #TODO locus-tag ask Thanassis

rule run_busco_prok:
    input:
        f"{DEFAULT_DEST_FILEPATH}{SPADES_FILEPATH}{{sample}}_spades/{{sample}}_contigs.fasta",
    output:
        out_dir=directory(f"{DEFAULT_DEST_FILEPATH}{BUSCO_FILEPATH}{{sample}}/txome_busco/prok"),
        dataset_dir=directory(f"{DEFAULT_DEST_FILEPATH}{BUSCO_FILEPATH}{{sample}}/resources/busco_downloads"),
    log:
        "logs/busco/{sample}.log",
    params:
        mode="genome",
        # optional parameters
        extra=" ".join(config.get("busco", "")),
    threads: AVAILABLE_THREADS
    wrapper:
        "v1.12.2/bio/busco" 