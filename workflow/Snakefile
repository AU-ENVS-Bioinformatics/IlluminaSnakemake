# Reading configuration file
configfile: "config/config.yaml"
DEFAULT_SOURCE_FILEPATH = config.get("DEFAULT_SOURCE_FILEPATH", "reads/")
DEFAULT_DEST_FILEPATH = config.get("DEFAULT_DEST_FILEPATH", "results/")
RENAMED_READS_FILEPATH = config.get("RENAMED_READS_FILEPATH", "renamed_raw_reads/")
TRIMMED_READS_FILEPATH = config.get("TRIMMED_READS_FILEPATH", "trimmed/")
FASTQC_FILEPATH = config.get("FASTQC_FILEPATH", "allfastqc/")
SPADES_FILEPATH = config.get("SPADES_FILEPATH", "spades/")
QUAST_FILEPATH = config.get("QUAST_FILEPATH", "quast/")
PROKKA_FILEPATH = config.get("PROKKA_FILEPATH", "prokka/")


# Searching for Illumina files
regex_raw_illumina_files = f"{DEFAULT_SOURCE_FILEPATH}{{name}}-{{sample}}_{{number}}_{{lane}}_{{read}}_{{segment}}.fastq.gz"
(name, sample, number, lane, read, segment,) = glob_wildcards(regex_raw_illumina_files)

rule all:
    input:
        expand(f"{DEFAULT_DEST_FILEPATH}{FASTQC_FILEPATH}{{sample}}_R1.html", sample = sample),
        expand(f"{DEFAULT_DEST_FILEPATH}{FASTQC_FILEPATH}{{sample}}_R2.html", sample = sample),
        expand(f"{DEFAULT_DEST_FILEPATH}{SPADES_FILEPATH}{{sample}}_spades/{{sample}}_contigs.fasta", sample = sample),
        expand(f"{DEFAULT_DEST_FILEPATH}{QUAST_FILEPATH}{{sample}}/report.tsv", sample = sample),
        expand(f"{DEFAULT_DEST_FILEPATH}{PROKKA_FILEPATH}{{sample}}_prokka", sample = sample)

rule renaming_files:
    input:
        expand(
            f"{DEFAULT_SOURCE_FILEPATH}{{name}}-{{sample}}_{{number}}_{{lane}}_{{read}}_{{segment}}.fastq.gz",
            zip,
            name = name,sample = sample,
            number = number,lane = lane,
            read = read, segment = segment
            )
    log:
        expand(
            "logs/renaming/{sample}_{read}.log",
            zip, sample = sample, read  = read),
    conda:
        "envs/renaming_files.yaml"
    output:
        expand(
            f"{DEFAULT_DEST_FILEPATH}{RENAMED_READS_FILEPATH}{{sample}}_{{read}}.fastq.gz",
            zip, sample = sample,read  = read
            ),
    script:
        "scripts/renaming_files.py"

rule trim_paired_end_reads:
    input:
        [f"{DEFAULT_DEST_FILEPATH}{RENAMED_READS_FILEPATH}{{sample}}_R1.fastq.gz",
         f"{DEFAULT_DEST_FILEPATH}{RENAMED_READS_FILEPATH}{{sample}}_R2.fastq.gz"],
    output:
        f"{DEFAULT_DEST_FILEPATH}{TRIMMED_READS_FILEPATH}{{sample}}_R1_val_1.fq.gz",
        f"{DEFAULT_DEST_FILEPATH}{TRIMMED_READS_FILEPATH}{{sample}}_R1.fastq.gz_trimming_report.txt",
        f"{DEFAULT_DEST_FILEPATH}{TRIMMED_READS_FILEPATH}{{sample}}_R2_val_2.fq.gz",
        f"{DEFAULT_DEST_FILEPATH}{TRIMMED_READS_FILEPATH}{{sample}}_R2.fastq.gz_trimming_report.txt",
    params:
        extra=" ".join(config.get("trim_galore", "")),
    log:
        "logs/trim_galore/{sample}.log",
    conda:
        "envs/trim_paired_end_reads.yaml",
    wrapper:
        "v1.12.1/bio/trim_galore/pe"

rule generate_fastq_qc_statistics:
    input:
        f"{DEFAULT_DEST_FILEPATH}{TRIMMED_READS_FILEPATH}{{sample}}_R{{read_n}}_val_{{read_n}}.fq.gz"
    output:
        html=f"{DEFAULT_DEST_FILEPATH}{FASTQC_FILEPATH}{{sample}}_R{{read_n}}.html",
        zip= f"{DEFAULT_DEST_FILEPATH}{FASTQC_FILEPATH}{{sample}}_R{{read_n}}_fastqc.zip"
    params:
        extra=" ".join(config.get("fastqc", "")),
    log:
        "logs/fastqc/{sample}_R{read_n}.log",
    conda:
        "envs/generate_fastq_qc_statistics.yaml",
    threads: 1
    wrapper:
        "v1.12.1/bio/fastqc"

rule assembling_genome:
    input:
        R1 =  f"{DEFAULT_DEST_FILEPATH}{TRIMMED_READS_FILEPATH}{{sample}}_R1_val_1.fq.gz",
        R2 =  f"{DEFAULT_DEST_FILEPATH}{TRIMMED_READS_FILEPATH}{{sample}}_R2_val_2.fq.gz",
    output:
        outdir = directory(f"{DEFAULT_DEST_FILEPATH}{SPADES_FILEPATH}{{sample}}_spades"),
        contigs = f"{DEFAULT_DEST_FILEPATH}{SPADES_FILEPATH}{{sample}}_spades/{{sample}}_contigs.fasta"
    params:
        extra=" ".join(config.get("spades", "")),
    log:
        "logs/spades/{sample}.log",
    conda: 
        "envs/assembling_genome.yaml",
    shell:
        "spades.py {params.extra}"
        " -o {output.outdir}"
        " -1 {input.R1} -2 {input.R2}" + 
        " >> {log} 2>&1"
        "&& mv {output.outdir}/contigs.fasta {output.contigs}"

rule generate_quality_assessment_genome_assemblies:
    input:
        fasta= f"{DEFAULT_DEST_FILEPATH}{SPADES_FILEPATH}{{sample}}_spades/{{sample}}_contigs.fasta",
        R1= f"{DEFAULT_DEST_FILEPATH}{TRIMMED_READS_FILEPATH}{{sample}}_R1_val_1.fq.gz",
        R2= f"{DEFAULT_DEST_FILEPATH}{TRIMMED_READS_FILEPATH}{{sample}}_R2_val_2.fq.gz",
    output:
        outdir = directory(f"{DEFAULT_DEST_FILEPATH}{QUAST_FILEPATH}{{sample}}"),
        report = f"{DEFAULT_DEST_FILEPATH}{QUAST_FILEPATH}{{sample}}/report.tsv",
    log:
        "logs/quast/{sample}.log",
    conda: 
        "envs/generate_quality_assessment_genome_assemblies.yaml",
    params:
        extra=" ".join(config.get("quast", "")),
    shell:
        "quast {params.extra} "
        "--pe1 {input.R1} --pe2 {input.R2} "
        "-o {output.outdir} "
        "{input.fasta} "
        ">> {log} 2>&1 "

rule annotate_bacterial_genome:
    input:
        f"{DEFAULT_DEST_FILEPATH}{SPADES_FILEPATH}{{sample}}_spades/{{sample}}_contigs.fasta",
    output:
        directory(f"{DEFAULT_DEST_FILEPATH}{PROKKA_FILEPATH}{{sample}}_prokka"),
    log:
        "logs/prokka/{sample}.log",
    conda: 
        "envs/annotate_bacterial_genome.yaml",
    params:
        extra=" ".join(config.get("prokka", "")),
    shell:
        "prokka --outdir {output} {params.extra} "
        "--prefix {wildcards.sample} "
        "{input} >> {log} 2>&1"
        #TODO locus-tag ask Thanassis